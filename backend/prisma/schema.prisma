generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int            @id @default(autoincrement())
  email         String         @unique
  name          String?
  password      String? // Optional for OAuth users
  googleId      String?        @unique
  discordId     String?        @unique
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  refreshTokens RefreshToken[]
  Cart          Cart?
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    Int
  createdAt DateTime @default(now())
  expiresAt DateTime
  revoked   Boolean  @default(false)
  user      User     @relation(fields: [userId], references: [id])
}

enum AdminRole {
  GOD
  MANAGER
  HELPER
}

model Admin {
  id        Int       @id @default(autoincrement())
  email     String    @unique
  password  String
  name      String?
  role      AdminRole
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  refreshTokens AdminRefreshToken[]
}

model AdminRefreshToken {
  id        Int      @id @default(autoincrement())
  token     String
  expiresAt DateTime
  adminId   Int
  admin     Admin    @relation(fields: [adminId], references: [id])
}

model Product {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  price       Float
  stock       Int      @default(0)
  isArchived  Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  categoryId  Int

  category Category       @relation(fields: [categoryId], references: [id]) // Relationship to Category
  images   ProductImage[]
  CartItem CartItem[]
}

model ProductImage {
  id        Int      @id @default(autoincrement())
  url       String
  altText   String?  @default("Image")
  createdAt DateTime @default(now())
  productId Int

  product Product @relation(fields: [productId], references: [id]) // Relationship to Product
}

model Category {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  products Product[]
}

model UploadedFile {
  id        Int      @id @default(autoincrement())
  filename  String
  url       String // This will store the constant URL to the uploaded file
  mimetype  String
  size      Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Cart {
  id        Int        @id @default(autoincrement())
  userId    Int        @unique // Each user has a single cart
  user      User       @relation(fields: [userId], references: [id])
  items     CartItem[] // Relationship to CartItem
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id        Int      @id @default(autoincrement())
  cartId    Int // Foreign key to Cart
  productId Int // Foreign key to Product
  quantity  Int      @default(1) // Number of items of the same product
  cart      Cart     @relation(fields: [cartId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

   @@unique([cartId, productId]) // Compound unique constraint
}
